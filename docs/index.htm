<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.8">
<meta name="author" content="GengoAI">
<title>Mango User Guide</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */
/* Uncomment @import statement below to use as custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}
audio,canvas,video{display:inline-block}
audio:not([controls]){display:none;height:0}
script{display:none!important}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
a{background:transparent}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:none}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite::before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}
*:not(pre)>code.nobreak{word-wrap:normal}
*:not(pre)>code.nowrap{white-space:nowrap}
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6)}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}
.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}
.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}
.literalblock pre.nowrap,.literalblock pre.nowrap pre,.listingblock pre.nowrap,.listingblock pre.nowrap pre{white-space:pre;word-wrap:normal}
.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:#999}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}
table.pyhltable td.code{padding-left:.75em;padding-right:0}
pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #dddddf}
pre.pygments .lineno{display:inline-block;margin-right:.25em}
table.pyhltable .linenodiv{background:none!important;padding-right:0!important}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt,.quoteblock .quoteblock{margin:0 0 1.25em;padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}
table.tableblock{max-width:100%;border-collapse:separate}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>thead>tr>.tableblock,table.grid-all>tbody>tr>.tableblock{border-width:0 1px 1px 0}
table.grid-all>tfoot>tr>.tableblock{border-width:1px 1px 0 0}
table.grid-cols>*>tr>.tableblock{border-width:0 1px 0 0}
table.grid-rows>thead>tr>.tableblock,table.grid-rows>tbody>tr>.tableblock{border-width:0 0 1px}
table.grid-rows>tfoot>tr>.tableblock{border-width:1px 0 0}
table.grid-all>*>tr>.tableblock:last-child,table.grid-cols>*>tr>.tableblock:last-child{border-right-width:0}
table.grid-all>tbody>tr:last-child>.tableblock,table.grid-all>thead:last-child>tr>.tableblock,table.grid-rows>tbody>tr:last-child>.tableblock,table.grid-rows>thead:last-child>tr>.tableblock{border-bottom-width:0}
table.frame-all{border-width:1px}
table.frame-sides{border-width:0 1px}
table.frame-topbot,table.frame-ends{border-width:1px 0}
table.stripes-all tr,table.stripes-odd tr:nth-of-type(odd){background:#f8f8f7}
table.stripes-none tr,table.stripes-odd tr:nth-of-type(even){background:none}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
td>div.verse{white-space:pre}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{margin-right:.25em}
ul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background-color:#00fafa}
.black{color:#000}
.black-background{background-color:#000}
.blue{color:#0000bf}
.blue-background{background-color:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background-color:#fa00fa}
.gray{color:#606060}
.gray-background{background-color:#7d7d7d}
.green{color:#006000}
.green-background{background-color:#007d00}
.lime{color:#00bf00}
.lime-background{background-color:#00fa00}
.maroon{color:#600000}
.maroon-background{background-color:#7d0000}
.navy{color:#000060}
.navy-background{background-color:#00007d}
.olive{color:#606000}
.olive-background{background-color:#7d7d00}
.purple{color:#600060}
.purple-background{background-color:#7d007d}
.red{color:#bf0000}
.red-background{background-color:#fa0000}
.silver{color:#909090}
.silver-background{background-color:#bcbcbc}
.teal{color:#006060}
.teal-background{background-color:#007d7d}
.white{color:#bfbfbf}
.white-background{background-color:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background-color:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media print,amzn-kf8{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
/* Stylesheet for CodeRay to match GitHub theme | MIT License | http://foundation.zurb.com */
/*pre.CodeRay {background-color:#f7f7f8;}*/
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 .25em}
.CodeRay span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0,.3)}
.CodeRay .line-numbers strong{color:rgba(0,0,0,.4)}
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;border:0;background:none}
table.CodeRay td{vertical-align: top;line-height:1.45}
table.CodeRay td.line-numbers{text-align:right}
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}
table.CodeRay td.code{padding:0 0 0 .5em}
table.CodeRay td.code>pre{padding:0}
.CodeRay .debug{color:#fff !important;background:#000080 !important}
.CodeRay .annotation{color:#007}
.CodeRay .attribute-name{color:#000080}
.CodeRay .attribute-value{color:#700}
.CodeRay .binary{color:#509}
.CodeRay .comment{color:#998;font-style:italic}
.CodeRay .char{color:#04d}
.CodeRay .char .content{color:#04d}
.CodeRay .char .delimiter{color:#039}
.CodeRay .class{color:#458;font-weight:bold}
.CodeRay .complex{color:#a08}
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}
.CodeRay .color{color:#099}
.CodeRay .class-variable{color:#369}
.CodeRay .decorator{color:#b0b}
.CodeRay .definition{color:#099}
.CodeRay .delimiter{color:#000}
.CodeRay .doc{color:#970}
.CodeRay .doctype{color:#34b}
.CodeRay .doc-string{color:#d42}
.CodeRay .escape{color:#666}
.CodeRay .entity{color:#800}
.CodeRay .error{color:#808}
.CodeRay .exception{color:inherit}
.CodeRay .filename{color:#099}
.CodeRay .function{color:#900;font-weight:bold}
.CodeRay .global-variable{color:#008080}
.CodeRay .hex{color:#058}
.CodeRay .integer,.CodeRay .float{color:#099}
.CodeRay .include{color:#555}
.CodeRay .inline{color:#000}
.CodeRay .inline .inline{background:#ccc}
.CodeRay .inline .inline .inline{background:#bbb}
.CodeRay .inline .inline-delimiter{color:#d14}
.CodeRay .inline-delimiter{color:#d14}
.CodeRay .important{color:#555;font-weight:bold}
.CodeRay .interpreted{color:#b2b}
.CodeRay .instance-variable{color:#008080}
.CodeRay .label{color:#970}
.CodeRay .local-variable{color:#963}
.CodeRay .octal{color:#40e}
.CodeRay .predefined{color:#369}
.CodeRay .preprocessor{color:#579}
.CodeRay .pseudo-class{color:#555}
.CodeRay .directive{font-weight:bold}
.CodeRay .type{font-weight:bold}
.CodeRay .predefined-type{color:inherit}
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}
.CodeRay .key{color:#808}
.CodeRay .key .delimiter{color:#606}
.CodeRay .key .char{color:#80f}
.CodeRay .value{color:#088}
.CodeRay .regexp .delimiter{color:#808}
.CodeRay .regexp .content{color:#808}
.CodeRay .regexp .modifier{color:#808}
.CodeRay .regexp .char{color:#d14}
.CodeRay .regexp .function{color:#404;font-weight:bold}
.CodeRay .string{color:#d20}
.CodeRay .string .string .string{background:#ffd0d0}
.CodeRay .string .content{color:#d14}
.CodeRay .string .char{color:#d14}
.CodeRay .string .delimiter{color:#d14}
.CodeRay .shell{color:#d14}
.CodeRay .shell .delimiter{color:#d14}
.CodeRay .symbol{color:#990073}
.CodeRay .symbol .content{color:#a60}
.CodeRay .symbol .delimiter{color:#630}
.CodeRay .tag{color:#008080}
.CodeRay .tag-special{color:#d70}
.CodeRay .variable{color:#036}
.CodeRay .insert{background:#afa}
.CodeRay .delete{background:#faa}
.CodeRay .change{color:#aaf;background:#007}
.CodeRay .head{color:#f8f;background:#505}
.CodeRay .insert .insert{color:#080}
.CodeRay .delete .delete{color:#800}
.CodeRay .change .change{color:#66f}
.CodeRay .head .head{color:#f4f}
</style>
</head>
<body class="article toc2 toc-left">
<div id="header">
<h1>Mango User Guide</h1>
<div class="details">
<span id="author" class="author">GengoAI</span><br>
<span id="revnumber">version v1.1</span>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_overview">1. Overview</a></li>
<li><a href="#_installation">2. Installation</a>
<ul class="sectlevel2">
<li><a href="#_dependencies">2.1. Dependencies</a></li>
</ul>
</li>
<li><a href="#_collections">3. Collections</a>
<ul class="sectlevel2">
<li><a href="#_maps">3.1. Maps</a>
<ul class="sectlevel3">
<li><a href="#_multimaps">3.1.1. Multimaps</a></li>
</ul>
</li>
<li><a href="#_trees">3.2. Trees</a></li>
<li><a href="#_indices">3.3. Indices</a></li>
<li><a href="#_counters">3.4. Counters</a></li>
<li><a href="#_disk_backed_collections">3.5. Disk-backed Collections</a></li>
<li><a href="#_tuples">3.6. Tuples</a></li>
</ul>
</li>
<li><a href="#_graphs">4. Graphs</a></li>
<li><a href="#_key_value_stores">5. Key-Value Stores</a></li>
<li><a href="#_input_output">6. Input / Output</a>
<ul class="sectlevel2">
<li><a href="#_resource_framework">6.1. Resource Framework</a></li>
</ul>
</li>
<li><a href="#_json">7. Json</a></li>
<li><a href="#_concurrency">8. Concurrency</a></li>
<li><a href="#_object_conversion_and_casting">9. Object Conversion and Casting</a></li>
<li><a href="#_reflection">10. Reflection</a></li>
<li><a href="#_dynamic_enumerations">11. Dynamic Enumerations</a>
<ul class="sectlevel2">
<li><a href="#_generating_dynamic_enumerations">11.1. Generating Dynamic Enumerations</a></li>
<li><a href="#_defining_elements">11.2. Defining Elements</a></li>
</ul>
</li>
<li><a href="#_parameter_maps">12. Parameter Maps</a></li>
<li><a href="#_tags">13. Tags</a></li>
<li><a href="#_parsing_framework">14. Parsing Framework</a></li>
<li><a href="#_specification_framework">15. Specification Framework</a></li>
<li><a href="#_mango_streaming_framework">16. Mango Streaming Framework</a></li>
<li><a href="#_logging">17. Logging</a></li>
<li><a href="#_string_utilities">18. String Utilities</a></li>
<li><a href="#appframework">19. Application Framework</a>
<ul class="sectlevel2">
<li><a href="#preload">19.1. Preloading Static Elements</a></li>
</ul>
</li>
<li><a href="#config">20. Configuration</a>
<ul class="sectlevel2">
<li><a href="#_sections">20.1. Sections</a></li>
<li><a href="#_beans">20.2. Beans</a></li>
</ul>
</li>
<li><a href="#cli">21. Command Line Parsing</a></li>
<li><a href="#_helpful_utilities_classes_and_interfaces">22. Helpful Utilities, Classes, and Interfaces</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="imageblock text-center">
<div class="content">
<img src="images/mango.png" alt="mango">
</div>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="images/gengoai.png" alt="gengoai" width="150px">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_overview"><a class="link" href="#_overview">1. Overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>A set of utilities and data structures that make java more convenient to use (in particular for Natural Language Processing, Text Mining, and Machine Learning).
Mango is <a href="https://www.apache.org/licenses/LICENSE-2.0.txt">Apache 2.0</a> licensed allowing it to be used for whatever purpose.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_installation"><a class="link" href="#_installation">2. Installation</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango requires Java 11 and is available via the maven central repository.</p>
</div>
<div class="paragraph">
<p><strong>Core Mango:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Special Mango Annotations like Preload:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-annoations<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Swing Applications and Helpers:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-swing-ui<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>SQL framework:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-sql<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_dependencies"><a class="link" href="#_dependencies">2.1. Dependencies</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_collections"><a class="link" href="#_collections">3. Collections</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_maps"><a class="link" href="#_maps">3.1. Maps</a></h3>
<div class="sect3">
<h4 id="_multimaps"><a class="link" href="#_multimaps">3.1.1. Multimaps</a></h4>

</div>
</div>
<div class="sect2">
<h3 id="_trees"><a class="link" href="#_trees">3.2. Trees</a></h3>

</div>
<div class="sect2">
<h3 id="_indices"><a class="link" href="#_indices">3.3. Indices</a></h3>

</div>
<div class="sect2">
<h3 id="_counters"><a class="link" href="#_counters">3.4. Counters</a></h3>

</div>
<div class="sect2">
<h3 id="_disk_backed_collections"><a class="link" href="#_disk_backed_collections">3.5. Disk-backed Collections</a></h3>

</div>
<div class="sect2">
<h3 id="_tuples"><a class="link" href="#_tuples">3.6. Tuples</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_graphs"><a class="link" href="#_graphs">4. Graphs</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_key_value_stores"><a class="link" href="#_key_value_stores">5. Key-Value Stores</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_input_output"><a class="link" href="#_input_output">6. Input / Output</a></h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_resource_framework"><a class="link" href="#_resource_framework">6.1. Resource Framework</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_json"><a class="link" href="#_json">7. Json</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_concurrency"><a class="link" href="#_concurrency">8. Concurrency</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_object_conversion_and_casting"><a class="link" href="#_object_conversion_and_casting">9. Object Conversion and Casting</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_reflection"><a class="link" href="#_reflection">10. Reflection</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_dynamic_enumerations"><a class="link" href="#_dynamic_enumerations">11. Dynamic Enumerations</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dynamic enumerations are an enum-like objects that can have elements defined at runtime.
Elements on a dynamic enumeration are singleton objects.
In most cases it is acceptable to use the <code>==</code> operator for checking equality.
There are two types of dynamic enumerations:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Flat enums - act in the same manner as Java enums</p>
</li>
<li>
<p>Hierarchical enums - each value is capable of having a single parent forming a tree structure with a single ROOT.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Both flat and hierarchical enums are uniquely defined by the label used to make them.
Labels are restricted to only containing letters, digits, and underscores.
Further, all labels are normalized to uppercase.
Note that all labels should be unique within the dynamic enumeration.</p>
</div>
<div class="paragraph">
<p>Dynamic enumeration elements implement the  <code>Tag</code> interface, which defines the <code>name()</code>, <code>label()</code>, and <code>isInstance(Tag)</code> methods.
For flat enum elements these methods are all based on its normalized label, i.e. <code>name()</code> and <code>label()</code> return the normalized label and <code>isInstance(Tag)</code> checks that the given tag is of the same class and then checks for label name equality.
However, hierarchical enum elements are defined with a label and a parent.
Therefore, the <code>name()</code> method of hierarchical enum elements returns the full path from the ROOT (but not including the ROOT), e.g. if we have an element with label <code>ScienceTeacher</code> whose parent is <code>Teacher</code> which has ROOT as the parent, the name would be <code>Teacher$ScienceTeacher</code>.
The <code>isInstance(Tag)</code> method will travese the hierarchy, such that the method would return true if we ask if  <code>Teacher$ScienceTeacher</code> is an instance of <code>Teacher</code>.</p>
</div>
<div class="sect2">
<h3 id="_generating_dynamic_enumerations"><a class="link" href="#_generating_dynamic_enumerations">11.1. Generating Dynamic Enumerations</a></h3>
<div class="paragraph">
<p>The main method of the <code>EnumValue</code> class provides cli interface for bootstraping the creation of a dynamic enumeration.
Usage is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="bash"> java EnumValue --className=&lt;Name of Enum&gt; --packageName=&lt;Package to put the Class in&gt; --src=&lt;Source directory&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The generated class will be placed in the provided source folder under the given package name.
Optionally, a <code>-t</code> parameter can be passed to the command line to generate a hierarchical enum.</p>
</div>
<div class="paragraph">
<p>Core to the definition of both flat and hierarchical enumerations are:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Registry</strong> - The registry stores the defined elements.</p>
</li>
<li>
<p><strong>public static Collection&lt;Colors&gt; values()</strong> - Acts the same as the <code>values()</code> method on a Java enum.</p>
</li>
<li>
<p><strong>public static Colors valueOf(String name)</strong> - Acts the same as the <code>valueOf(String)</code> method on a Java enum.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In addition, the following make method is defined for flat enumerations: <code>public static TYPE make(String name)</code>
The following make method is defined for hierarchical enumerations: <code>public static TYPE make(TYPE parent, String name)</code></p>
</div>
<div class="paragraph">
<p>The supplied methods should not be removed.
It is possible to update the logic to suit your needs, but removing the methods all together can result in problems.</p>
</div>
</div>
<div class="sect2">
<h3 id="_defining_elements"><a class="link" href="#_defining_elements">11.2. Defining Elements</a></h3>
<div class="paragraph">
<p>We can define elements by adding static final variables like the following for flat enumerations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> Colors RED = make(<span class="string"><span class="delimiter">&quot;</span><span class="content">RED</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> Colors BLUE = make(<span class="string"><span class="delimiter">&quot;</span><span class="content">BLUE</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>and the following for hierarchical enumerations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">Entity</span> ANIMAL = make(ROOT,<span class="string"><span class="delimiter">&quot;</span><span class="content">ANIMAL</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">Entity</span> CANINE = make(ANIMAL,<span class="string"><span class="delimiter">&quot;</span><span class="content">CANINE</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the case of hierarchical dynamic enumerations or flat enumerations that require other information, it is useful to use the <a href="#preload">Preload</a> annotation on the class defining the elements.
This will ensure that the elements are initialized at startup when using the <a href="#appframework">Mango application</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parameter_maps"><a class="link" href="#_parameter_maps">12. Parameter Maps</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Parameter maps are specialized maps that have predefined set of keys (parameters) where each key has an associated type and default value.
They are useful to simulate "named and default parameters" found in other languages like Python.
However, parameters defined in a parameter map are typed and will validate valeus of the correct type are being assigned.
Parameter maps are implemented using the <code>ParamMap</code> class.</p>
</div>
<div class="paragraph">
<p>In order to define a <code>ParamMap</code>, you must first define the parameters.
The first step is to construct a parameter definition (<code>ParameterDef</code>) that maps a parameter name to a type.
Parameter definitions can be used by multiple <code>ParamMap`s.
To construct a `ParameterDef</code>, we use one of the static methods as such:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> ParameterDef&lt;<span class="predefined-type">String</span>&gt; STRING_PARAMETER = ParameterDef.strParam(<span class="string"><span class="delimiter">&quot;</span><span class="content">stringParameter</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> ParameterDef&lt;<span class="predefined-type">Boolean</span>&gt; BOOLEAN_PARAMETER = ParameterDef.boolParam(<span class="string"><span class="delimiter">&quot;</span><span class="content">booleanParameter</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>With the parameters defined, we can now create a parameter map.
Typically, you will want to subclass the <code>ParamMap</code> class setting its generic type to the class you are creating.
You will want to define a set of public final variables of type <code>Parameter</code> that will map a parameter definition to a value.
Each of the parameters has a default value associated with it, such that whenever the parameter map is used the calling method can be assured that a reasonable value for a parameter will be set.
The following example illustrates the definition of a <code>MyParameters</code> parameter map with two parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">MyParameters</span> <span class="directive">extends</span> ParamMap&lt;MyParameters&gt; {
 <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">String</span>&gt; stringParameter = parameter(STRING_PARAMETER, <span class="string"><span class="delimiter">&quot;</span><span class="content">DEFAULT</span><span class="delimiter">&quot;</span></span>);
 <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Boolean</span>&gt; booleanParameter = parameter(BOOLEAN_PARAMETER, <span class="predefined-constant">true</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we can define methods that utilize our <code>MyParameters</code> class.
We can define the method to take a <code>MyParameters</code> object or to take a <code>Consumer</code>.
Examples of this are as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">void</span> myMethod(MyParameters parameters) {
    <span class="predefined-type">System</span>.out.println(parameters.&lt;<span class="predefined-type">String</span>&gt;get(STRING_PARAMETER));
    <span class="predefined-type">System</span>.out.println(parameters.&lt;<span class="predefined-type">Boolean</span>&gt;get(BOOLEAN_PARAMETER));
}

<span class="directive">public</span> <span class="type">void</span> myMethod2(Consumer&lt;MyParameters&gt; consumer) {
    myMethod(<span class="keyword">new</span> MyParameters().update(consumer));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>ParamMap</code> have fluent accessors, so that we when using them as the argument to <code>myMethod</code>, we can do the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod(<span class="keyword">new</span> MyParameters().set(STRING_PARAMETER, <span class="string"><span class="delimiter">&quot;</span><span class="content">Set</span><span class="delimiter">&quot;</span></span>)
                           .set(BOOLEAN_PARAMETER, <span class="predefined-constant">false</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also use the public fields directly:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod(<span class="keyword">new</span> MyParameters().stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">SET</span><span class="delimiter">&quot;</span></span>)
                           .booleanParameter.set(<span class="predefined-constant">false</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>myMethod2</code> illustrates how we can mimic named parameters using `Consumer`s.
Whe can call the method in the following manner:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod2(<span class="error">$</span> -&gt; {
  <span class="error">$</span>.stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>);
  <span class="error">$</span>.booleanParameter.set(<span class="predefined-constant">true</span>);
});

<span class="comment">//Or via fluent accessors</span>
myMethod2(<span class="error">$</span> -&gt; <span class="error">$</span>.stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>)
                .booleanParameter.set(<span class="predefined-constant">true</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition to using the public variable, we can also set a parameter&#8217;s value using its name as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod2(p -&gt; {
  p.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">stringParameter</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>);
  p.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">booleanParameter</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">true</span>);
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can use inheritance to specialize your parameter maps, for example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">abstract</span> <span class="type">class</span> <span class="class">BaseParameters</span>&lt;V <span class="directive">extends</span> BaseParameters&lt;V&gt; <span class="directive">extends</span> ParamMap&lt;V&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; iterations = parameter(ITERATIONS, <span class="integer">100</span>);
}

<span class="directive">public</span> <span class="type">class</span> <span class="class">ClusterParameters</span> <span class="directive">extends</span> BaseParameters&lt;ClusterParameters&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; K = parameter(K, <span class="integer">2</span>);
}

<span class="directive">public</span> <span class="type">class</span> <span class="class">ClassifierParameters</span> <span class="directive">extends</span> BaseParameters&lt;ClassifierParameters&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; labelSize = parameter(LABEL_SIZE, <span class="integer">2</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Creates an abstract base parameter class (<code>BaseParameters</code>) which defines common parameters (<code>iterations</code>).
Child classes (<code>ClusterParameters</code> and <code>ClassifierParameters</code>) then can add parameters specific to their use case.
We can then construct a method which takes the <code>BaseParameters</code>, e.g. <code>train(BaseParameters&lt;?&gt; parameters)</code> which we during invocation we can send the correct set of parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Option 1 use the as method</span>
<span class="directive">public</span> <span class="type">void</span> train(BaseParameters&lt;?&gt; parameters) {
    ClassifierParameters cParameters = parameters.as(ClassifierParameters.class);
    <span class="type">int</span> iterations = cParameters.get(ITERATIONS);
    <span class="type">int</span> labelSize = cParameters.get(LABEL_SIZE);
}

<span class="comment">//Option 2 use the getOrDefault methods</span>
<span class="directive">public</span> <span class="type">void</span> train(BaseParameters&lt;?&gt; parameters) {
    <span class="type">int</span> iterations = parameters.get(ITERATIONS);
    <span class="type">int</span> labelSize = parameters.getOrDefault(LABEL_SIZE,<span class="integer">2</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When using the <code>BaseParameters</code> class we can cast the class to the correct instance type (e.g. <code>ClassifierParameters</code>) as shown in option 1 or use the <code>getOrDefault</code> methods on the <code>ParamMap</code> as shown in option2.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tags"><a class="link" href="#_tags">13. Tags</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_parsing_framework"><a class="link" href="#_parsing_framework">14. Parsing Framework</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_specification_framework"><a class="link" href="#_specification_framework">15. Specification Framework</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_mango_streaming_framework"><a class="link" href="#_mango_streaming_framework">16. Mango Streaming Framework</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_logging"><a class="link" href="#_logging">17. Logging</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="_string_utilities"><a class="link" href="#_string_utilities">18. String Utilities</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="appframework"><a class="link" href="#appframework">19. Application Framework</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>The application framework takes away much of the boilerplate in creating a command line or gui application, such as initializing configuration and command line parsing.
Application has three abstract implementations: <code>CommandLineApplication</code>  and <code>SwingApplication</code> (mango-swing).
While Similar there are small differences in the use of these classes.</p>
</div>
<div class="paragraph">
<p>The following is an example of a command line application:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Application</span>.Description(<span class="string"><span class="delimiter">&quot;</span><span class="content">My application example</span><span class="delimiter">&quot;</span></span>) <span class="directive">public</span> <span class="type">class</span> <span class="class">MyApplication</span> <span class="directive">extends</span> CommandLineApplication {

  <span class="annotation">@Option</span>(description = <span class="string"><span class="delimiter">&quot;</span><span class="content">The user name</span><span class="delimiter">&quot;</span></span>, required = <span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">n</span><span class="delimiter">&quot;</span></span>} )
  <span class="predefined-type">String</span> userName

  <span class="annotation">@Option</span>(name=<span class="string"><span class="delimiter">&quot;</span><span class="content">age</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The user age</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>})
  <span class="type">int</span> userAge

  <span class="annotation">@Override</span>
  <span class="directive">protected</span> <span class="type">void</span> programLogic() <span class="directive">throws</span> <span class="exception">Exception</span> {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Hello </span><span class="delimiter">&quot;</span></span> + userName + <span class="string"><span class="delimiter">&quot;</span><span class="content">! You are </span><span class="delimiter">&quot;</span></span> + userAge + <span class="string"><span class="delimiter">&quot;</span><span class="content"> years old!</span><span class="delimiter">&quot;</span></span>);
  }

  <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
    <span class="keyword">new</span> MyApplication.run(args);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The sample MyApplication class extends the <code>CommandLineApplication</code> class.
Command line applications implement their logic in the programLogic method and should have the <code>run(args[])</code> method called in the main method.
The super class takes care of converting command line arguments into local fields on MyApplication using the <code>@Option</code> annotation (for information on the specification see <a href="#cli">Command Line Parsing</a>).
<code>@Option</code> annotations that do not have a name set use the field name as the command line option (e.g. <code>--userName</code> in the example above).
In addition, the global ''Config'' (see <a href="#config">Configuration</a> for more information) instance is initialized using default configuration file associated with the package of the application.
By default the application name is set to the class name.
Note: the application name and associated default config package can be specified via a constructor by calling super.</p>
</div>
<div class="paragraph">
<p>A simple Swing application is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Application</span>.Description(<span class="string"><span class="delimiter">&quot;</span><span class="content">My application example</span><span class="delimiter">&quot;</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">MySwingApplication</span> <span class="directive">extends</span> SwingApplication {

  <span class="annotation">@Option</span>(description = <span class="string"><span class="delimiter">&quot;</span><span class="content">The user name</span><span class="delimiter">&quot;</span></span>, required = <span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">n</span><span class="delimiter">&quot;</span></span>} )
  <span class="predefined-type">String</span> userName

  <span class="annotation">@Option</span>(name=<span class="string"><span class="delimiter">&quot;</span><span class="content">age</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The user age</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span> aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>})
  <span class="type">int</span> userAge

  <span class="annotation">@Override</span>
  <span class="directive">public</span> <span class="type">void</span> setup() {
    <span class="comment">//prepare your GUI</span>
  }

  <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
    <span class="keyword">new</span> MySwingApplication.run(args);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Swing applications require the <code>mango-swing</code> libreary.</p>
</div>
<div class="sect2">
<h3 id="preload"><a class="link" href="#preload">19.1. Preloading Static Elements</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="config"><a class="link" href="#config">20. Configuration</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>The configuration format is a mix between json and java properties format.
The need to know features are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The global Config object accesses properties from config files, the command line, and environment variables</p>
</li>
<li>
<p>Comments with <code>#</code></p>
</li>
<li>
<p>Property names can be a combination of letters, digits, ".", and "_"</p>
</li>
<li>
<p>Properties and their values are separated using = or :</p>
</li>
<li>
<p>Property values can be referenced using <code>${propertyName}</code></p>
</li>
<li>
<p>Beans can be referenced using <code>@{beanName}</code></p>
</li>
<li>
<p>Properties can be appended to using <code>+=</code></p>
</li>
<li>
<p>The <code>\</code> is used to escape characters in property value (especially useful for whitespace at the beginning of a value)</p>
</li>
<li>
<p>The <code>\</code> at the end of a line with no spaces after it indicates a multiline property value (Same as java properties)</p>
</li>
<li>
<p>Other config files can be imported using @import for example <code>@import com/mycompany/myapp/myconf.conf</code> by default the resource is considered to be a classpath resource</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_sections"><a class="link" href="#_sections">20.1. Sections</a></h3>
<div class="paragraph">
<p>Sections avoid the need to retype the same prefix multiple times.
For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>remote {
   apis {
	  search = google
	  translate = bing
	}
   storage {
   	 text = s3
   	 search = solr
   }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>would equate to the following individual properties being set:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>tools.api.search = google
tools.api.translate = bing
tools.storage.text = s3
tools.storage.search = solr</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_beans"><a class="link" href="#_beans">20.2. Beans</a></h3>
<div class="paragraph">
<p>Beans can be defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>ParentJohn {
    singleton=true
    class=com.mycompany.app.Parent
    constructor {
       param1 {
         type  = String
         value = John
       }
       param2 {
         type = String[]
         value = Same,Ryan,Billy
       }
    }
}</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="cli"><a class="link" href="#cli">21. Command Line Parsing</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango provides a posix-like command line parser that is capable of handling non-specified arguments.
Command line arguments can be specified manually adding by adding a <code>NamedOption</code> via the <code>addOption(NamedOption)</code> method or automatically based on fields with <code>@Option</code> annotations by setting the parser&#8217;s <code>owner</code> object via the constructor.
The parser accepts long (e.g. <code>--longOption</code>) and short (e.g. <code>-s</code>) arguments.
Multiple short (e.g. single character) arguments can be specified at one time (e.g. <code>-xzf</code> would set the x, z, and f options to true).
Short arguments may have values (e.g. <code>-f FILENAME</code>).
Long arguments whose values are not defined as being boolean require their value to be set.
Boolean valued long arguments can specified without the true/false value.
All parsers will have help (<code>-h</code> or <code>--help</code>), config (<code>--config</code>), and explain config (<code>--config-explain</code>) options added automatically.&gt;</p>
</div>
<div class="paragraph">
<p>Values for options will be specified on the corresponding <code>NamedOption</code> instance.
The value can be retrieved either directly from the <code>NamedOption</code> or by using the <code>get(String)</code> method.
Argument names need not specify the <code>--</code> or <code>-</code> prefix.</p>
</div>
<div class="paragraph">
<p>An example of manually building a CommandLineParser is listed below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">CommandLineParser parser = <span class="keyword">new</span> CommandLineParser();
parser.addOption(NamedOption.builder()
                               .name(<span class="string"><span class="delimiter">&quot;</span><span class="content">arg1</span><span class="delimiter">&quot;</span></span>)
                               .description(<span class="string"><span class="delimiter">&quot;</span><span class="content">dummy</span><span class="delimiter">&quot;</span></span>)
                               .required(<span class="predefined-constant">true</span>)
                               .type(<span class="predefined-type">String</span>.class)
                               .build()
                   );
<span class="predefined-type">String</span><span class="type">[]</span> notParsed = parser.parse(args)</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example of using fields to define your command line arguments is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">MyMain</span> {

        <span class="annotation">@Option</span>(description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The input file</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">i</span><span class="delimiter">&quot;</span></span>})
        <span class="predefined-type">String</span> input;

        <span class="annotation">@Option</span>(name =<span class="string"><span class="delimiter">&quot;</span><span class="content">l</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">Convert input to lowercase</span><span class="delimiter">&quot;</span></span>, <span class="keyword">default</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>)
        <span class="type">boolean</span> lowerCase;

        <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
                MyMain app = <span class="keyword">new</span> MyMain();
                CommandLineParser parser = <span class="keyword">new</span> CommandLineParser(app);
        }

}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_helpful_utilities_classes_and_interfaces"><a class="link" href="#_helpful_utilities_classes_and_interfaces">22. Helpful Utilities, Classes, and Interfaces</a></h2>
<div class="sectionbody">
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Copyable</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Copyable interface defines a method for returning a copy of an object.
Individual implementations are left to determine if the copy is deep or shallow.
However, a preference is for deep copies.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>EncryptionMethod</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Convenience methods for encryption with common algorithms.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Language</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Enumeration of world languages with helpful information on whether or not the language is Whitespace delimited or if language is read right to left (May not be complete)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Stopwatch</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tracks start and ending times to determine total time taken.
(Not Thread Safe)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>MultithreadedStopwatch</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tracks start and ending times to determine total time taken.
(Thread Safe)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Interner</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Mimics <code>String.intern()</code> with any object using heap memory.
Uses weak references so that objects no longer in memory can be reclaimed.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Lazy</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Lazily create a value in a thread safe manner.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Validation</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Convenience methods for validating method arguments.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version v1.1<br>
Last updated 2020-07-04 09:30:16 -0500
</div>
</div>
</body>
</html>